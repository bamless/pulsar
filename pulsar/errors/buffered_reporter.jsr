import pulsar.errors for Reporter, Severity

// Implementation of Reporter that buffers the errors and delays the reporting until 
// `reportErrors` is called.
// Strategy objects are used to customize how to format the errors, and where to output them:
//  - `formatStrategy`: an object that provides a method format(pulsar.errors.Severity, String, parse.token.Token) -> String
//  - `writeStragegy`: an object that provides a method write(string) -> void
class BufferedReporter is Reporter
    fun new(formatStrategy, writeStrategy)
        this._formatStragety = formatStrategy
        this._writeStrategy = writeStrategy
        this._errors = []
    end

    // Buffers an error to be reported at a later time
    fun reportError(severity, message, token)
        this._errors.add((severity, message, token))
    end

    // Reports all recorded errors till now and clears the buffer. The errors are sorted by line.
    // Returns a table containing the number of errors associated with their severity
    fun reportErrors()
        var numErrors = {
            Severity.ERROR   : 0,
            Severity.WARNING : 0
        }

        this._errors.sort(|e1, e2| => e1[2].line() - e2[2].line())

        for var severity, message, token in this._errors
            numErrors[severity] += 1
            this._writeStrategy.write(this._formatStragety.format(severity, message, token))
        end

        this._errors.clear()
        return numErrors
    end

    // Returns a copy of the error list
    fun getErrors()
        return List(this._errors)
    end

    // Returns currently buffered errors
    fun numErrors()
        return #this._errors
    end

    // Clears currentrly buffered errors
    fun clearErrors()
        this._errors.clear()
    end
end