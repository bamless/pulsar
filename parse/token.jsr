// Human readable names of the `Type` enum
var TypeNames = [
    "(", ")", "[", "]", "{", "}", "!", "!=", ",", ".", "...", "=>", "=", "+=", "-=", "/=", "*=",
    "%=", "==", ">", ">=", "<", "<=", "<<", ">>", "+", "-", "/", "*", "%", "^", "#", "##", "&", "~",
    ":", "|", ";", "in", "begin", "end", "<identifier>", "<string>", "<number>", "and", "class",
    "else", "false", "native", "fun", "for", "if", "elif", "null", "or", "return", "import", "as",
    "is", "super", "true", "var", "static", "while", "continue", "break", "try", "except", "ensure",
    "raise", "with", "<unterminated string>", "<newline>", "<error>", "<end of file>"
]

// Enumeration encoding different types of token
var Type = Enum(
    "LPAREN",
    "RPAREN",
    "LSQUARE",
    "RSQUARE",
    "LCURLY",
    "RCURLY",

    "BANG",
    "BANG_EQ",
    "COMMA",
    "DOT",
    "VARARG",
    "ARROW",

    "EQUAL",
    "PLUS_EQ",
    "MINUS_EQ",
    "DIV_EQ",
    "MULT_EQ",
    "MOD_EQ",

    "EQUAL_EQUAL",
    "GT",
    "GE",
    "LT",
    "LE",
    "LSHIFT",
    "RSHIFT",
    "PLUS",
    "MINUS",
    "DIV",
    "MULT",
    "MOD",
    "POW",
    "HASH",
    "HASH_HASH",
    "AMPER",
    "TILDE",

    "COLON",
    "PIPE",
    "SEMICOLON",
    "IN",

    "BEGIN",
    "END",

    "IDENTIFIER",
    "STRING",
    "NUMBER",

    "AND",
    "CLASS",
    "ELSE",
    "FALSE",
    "NAT",
    "FUN",
    "FOR",
    "IF",
    "ELIF",
    "NULL",
    "OR",
    "RETURN",
    "IMPORT",
    "AS",
    "IS",
    "SUPER",
    "TRUE",
    "VAR",
    "STATIC",
    "WHILE",
    "CONTINUE",
    "BREAK",

    "TRY",
    "EXCEPT",
    "ENSURE",
    "RAISE",
    "WITH",

    "UNTERMINATED_STR",
    "NEWLINE",
    "ERR",
    "EOF"
)

// A J* lexical token
class Token
    fun new(source, type, start, length)
        this.type = type
        this._source = source
        this._start = start
        this._length = length
    end

    fun getLexeme()
        return this._source[this._start, this._start + this._length]
    end

    fun line()
        return this._source.lineAt(this._start)
    end

    fun lineEnd()
        return this._source.lineAt(this._start + this._length)
    end

    fun coloumn()
        return this._source.coloumnAt(this._start)
    end

    fun coloumnEnd()
        return this._source.coloumnAt(this._start + this._length)
    end

    fun start()
        return this._start
    end

    fun length()
        return this._length
    end

    fun getSource()
        return this._source
    end

    fun __eq__(o)
        return type(this) == type(o) and this.getLexeme() == o.getLexeme()
    end

    fun __hash__()
        return this.getLexeme().__hash__()
    end

    fun __string__()
        return "Token({0}, '{1}')" % (Type.name(this.type), this.getLexeme().escaped()) 
    end
end