var VERSION = (0, 0, 4)

import io
import sys

import pulsar.opt_parse as opt_parse
import pulsar.pulsar for Pulsar
import pulsar.reporters.json_reporter for JsonReporter
import pulsar.reporters.pretty_reporter for PrettyReporter

fun main(args)
    var parser = opt_parse.OptParser("pulsar [options] [files...]", "A static analyzer for the J* language", [
        opt_parse.Option("out", "o", "Write errors to the specified file", 1, ["file"]),
        opt_parse.Option("version", "v", "Print version information and exit", 0),
        opt_parse.Option("json", "j", "Output errors formatted as JSON", 0),
        opt_parse.Option("no-resolve", "V", "Disable variable resolution pass", 0),
        opt_parse.Option("no-redefined-globals", "g", "Ignore redefined global variables", 0),
        opt_parse.Option("no-unreachable", "U", "Disable unreachable code pass", 0),
        opt_parse.Option("no-unused-args", "a", "Ignore unused function arguments", 0),
        opt_parse.Option("no-unused", "u", "Disable unused variable pass", 0),
        opt_parse.Option("no-check-returns", "r", "Disable return checking pass", 0),
        opt_parse.Option("no-access-check", "A", "Disable access checking pass", 0)
    ])

    var opts, files = parser.parse(args)

    if opts["version"]
        print("{0} v{1}" % (__name__, VERSION.join(".")))
        sys.exit(0)
    end

    var pulsar = Pulsar(opts)
    var outFile = io.File(opts["out"], "w") if opts["out"] else io.stderr

    with JsonReporter(outFile) if opts["json"] else PrettyReporter(outFile) reporter
        for var path in files
            try
                print("Analyzing {0}..." % path)

                pulsar.analyzeFile(path, reporter)
                
                var errors, warnings = reporter.numErrors(), reporter.numWarnings()
                reporter.reportErrors()

                print("File {0}: {1} errors, {2} warnings\n" % (path, errors, warnings))
            except io.IOException e
                io.stderr.writeln("Error {0}: {1}\n" % (path, e.err()))
            end
        end
    end
end