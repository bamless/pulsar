import parse.ast as ast

import pulsar.builtins as builtins
import pulsar.passes.pass_visitor for PassVisitor
import pulsar.passes.symtable for SymbolTable

// Computes the intersection of two Tables, only considering keys 
static fun intersect(table1, table2)
    var res = {}
    table1.filter(|key| => table2.contains(key)).forEach(|key| => res[key] = true)
    return res
end

// Stores information about a declared variable
static class Variable
    fun new(name, line, scope)
        this.name = name
        this.line = line
        this.scope = scope
    end

    fun __eq__(o)
        if type(o) != type(this) return false end
        return this.scope == o.scope and this.name == o.name
    end

    fun __hash__()
        return this.name.__hash__() + this.scope.__hash__()
    end
end

// Variable resolver
// Walks the AST and makes sure that variables respect scoping rules
// It also detects and reports some common errors, such as use before declaration of
// static globals, possibly uninitialized variables and unused variables
class VariableResolver is PassVisitor
    fun new(reporter, ignoreGlobalRedef=false)
        super(reporter)
        this._ignoreGlobalRedef = ignoreGlobalRedef
        this._variables = SymbolTable()
        this._initializedVars = SymbolTable()
        this._functionDepth = 0
        this._fwdRefs = []
    end

    fun visitModule(module)
        this._enterScope()
        
        super(builtins.getBuiltinModule("core.jsr"))

        for var stmt in module.statements
            var initialized = stmt.accept(this)
            this._propagateInitialization(initialized)
        end

        this._resolveFwdRefs()
        this._exitScope()
    end

    // Visits a block and returns a Table containing the variables initialized in it
    fun visitBlock(block)
        this._enterScope()

        for var stmt in block.statements
            var initialized = stmt.accept(this)
            this._propagateInitialization(initialized)
        end

        return this._exitScope()
    end

    fun _propagateInitialization(initializedVars)
        if !initializedVars return end
        for var variable in initializedVars
            if variable.scope <= this._getCurScope()
                this._setInitialized(variable)
            end
        end
    end

    // -----------------------------------------------------------------------------
    // DECLARATIONS
    // -----------------------------------------------------------------------------

    fun visitFunc(func)
        if func.isStatic()
            this._checkStaticUsage(func.name)
        end
        this._define(func.name, true)
        this._visitFuncBody(func)
    end

    fun visitClass(cls)
        if cls.isStatic()
            this._checkStaticUsage(cls.name)
        end

        this._define(cls.name, true)

        if cls.superClass
            cls.superClass.accept(this)
        end

        for var meth in cls.methods
            if meth is ast.FuncDecl
                this._visitFuncBody(meth, true)
            end
        end
    end

    fun _visitFuncBody(func, isMethod=false)
        this._enterFunction()

        if isMethod
            this._defineName('this', func.funTok.line(), this._getCurScope(), true)
        end

        if func.vararg
            this._defineName('args', func.funTok.line(), this._getCurScope(), true)
        end

        for var arg in func.arguments
            this._define(arg, true)
        end

        for var stmt in func.body.statements
            var initialized = stmt.accept(this)
            this._propagateInitialization(initialized)
        end

        this._exitFunction()
    end

    fun visitNative(nat)
        if nat.isStatic()
            this._checkStaticUsage(nat.name)
        end
        this._define(nat.name, true)
        super(nat)
    end

    fun visitVar(varDecl)
        var variables = []
        for var name in varDecl.names
            if varDecl.isStatic()
                this._checkStaticUsage(name)
            end
            variables.add(this._define(name, false))
        end

        super(varDecl)

        if varDecl.init != null
            for var variable in variables
                this._setInitialized(variable)
            end
        end
    end

    fun _checkStaticUsage(token)
        if !this._inGlobalScope() return end

        var name = token.getLexeme()
        for var forwardDecl in this._fwdRefs
            if name == forwardDecl.getLexeme()
                this._error("Static name '{0}' referenced before declaration (line {1})" %
                            (name, token.line()), forwardDecl)
            end
        end
    end

    // -----------------------------------------------------------------------------
    // STATEMENTS
    // -----------------------------------------------------------------------------

    // Visits an `if` statement and retuns variables initialized in both branches
    fun visitIf(ifStmt)
        ifStmt.cond.accept(this)

        var thenInit = ifStmt.thenBody.accept(this)

        var elseInit = {}
        if ifStmt.elseBody
            elseInit = ifStmt.elseBody.accept(this)
        end

        return intersect(thenInit, elseInit)
    end

    // Visits a for statement and returns variables initialized in its head
    fun visitFor(forStmt)
        this._enterScope()

        if forStmt.init forStmt.init.accept(this) end
        if forStmt.cond forStmt.cond.accept(this) end
        if forStmt.action forStmt.action.accept(this) end

        forStmt.body.accept(this)
        
        return this._exitScope()
    end

    fun visitTry(tryStmt)
        var tryInit = tryStmt.tryBlock.accept(this)

        var excInit = null
        if tryStmt.excepts != null
            for var exc in tryStmt.excepts
                var init = exc.accept(this)
                excInit = intersect(excInit, tryInit) if excInit else init
            end
        end

        var ensureInit = null
        if tryStmt.ensureBlock
            ensureInit = tryStmt.ensureBlock.accept(this)
        end

        return intersect(tryInit, excInit) if !tryStmt.ensureBlock else ensureInit
    end

    fun visitExcept(exceptStmt)
        this._enterScope()
       
        exceptStmt.expression.accept(this)
        this._define(exceptStmt.name, true)

        for var stmt in exceptStmt.body.statements
            stmt.accept(this)
        end

        return this._exitScope()
    end

    fun visitForEach(forEach)
        forEach.iter.accept(this)

        this._enterScope()

        forEach.variable.accept(this)
        for var id in forEach.variable.names
            var variable = this._lookupVariable(id)
            this._setInitialized(variable)
        end

        for var s in forEach.body.statements
            s.accept(this)
        end

        this._exitScope()
    end

    fun visitWith(withStmt)
        withStmt.expression.accept(this)

        this._enterScope()

        this._define(withStmt.name, true)
        withStmt.body.accept(this)

        this._exitScope()
    end

    fun visitImport(importStmt)
        if importStmt.asName
            this._define(importStmt.asName, true)
        elif importStmt.names
            for var name in importStmt.names
                this._define(name, true)
            end
        else
            this._define(importStmt.modules[0], true)
        end
    end

    // -----------------------------------------------------------------------------
    // EXPRESSIONS
    // -----------------------------------------------------------------------------

    fun visitAssignment(assign)
        assign.r.accept(this)

        if assign.l is ast.TupleLit
            for var lhs in assign.l.expressions
                if lhs is ast.VarLit
                    var variable = this._lookupVariable(lhs.id)
                    this._setInitialized(variable)
                end
            end
        elif assign.l is ast.VarLit
            var variable = this._lookupVariable(assign.l.id)
            this._setInitialized(variable)
        end

        assign.l.accept(this)
    end

    fun visitVarLit(varLit)
        this._resolve(varLit.id)
    end

    fun visitFuncLit(funcLit)
        this._visitFuncBody(funcLit)
    end

    fun _enterFunction()
        this._enterScope()
        this._functionDepth += 1
    end

    fun _exitFunction()
        this._functionDepth -= 1
        this._exitScope()
    end

    fun _enterScope()
        this._variables.enterScope()
        this._initializedVars.enterScope()
    end

    fun _exitScope()
        this._variables.exitScope()
        return this._initializedVars.exitScope()
    end

    fun _lookupVariable(token)
        return this._variables.lookup(token.getLexeme())
    end

    fun _define(token, init)
        var prevDecl = this._variables.lookupAt(token.getLexeme(), -1)
        if !prevDecl or this._ignoreGlobalRedef and this._inGlobalScope()
            return this._defineName(token.getLexeme(), token.line(), this._getCurScope(), init)
        else
            this._error("Name '{0}' already declared, previous declaration at line {1}" %
                        (prevDecl.name, prevDecl.line), token)
            return null
        end
    end

    fun _defineName(name, line, scope, init)
        var variable = Variable(name, line, scope)
        this._variables.insert(name, variable)
        if init this._setInitialized(variable) end
        return variable
    end

    fun _setInitialized(variable)
        if !variable return end
        this._initializedVars.insert(variable, true)
    end

    fun _resolve(token)
        var variable = this._lookupVariable(token)
        if variable
            if !this._initializedVars.lookup(variable)
                this._warn("Variable '{0}' (declared at line {1}) may be uninitialized" %
                            (variable.name, variable.line), token)
            end
        elif !this._inMainFunc()
            this._fwdRefs.add(token)
        else
            this._error("Cannot resolve name '{0}'" % token.getLexeme(), token)
        end
    end

    fun _resolveFwdRefs()
        for var token in this._fwdRefs
            this._resolve(token)
        end
    end

    // -----------------------------------------------------------------------------
    // UTILITY METHODS
    // -----------------------------------------------------------------------------

    fun _inMainFunc()
        return this._functionDepth == 0
    end

    fun _inGlobalScope()
        return #this._variables == 1
    end

    fun _getCurScope()
        return #this._variables - 1
    end
end