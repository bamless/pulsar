import io

class ErrorReporter
    fun new()
        this._numErrors = 0
    end

    fun reportError(msg_, tok_)
        this._numErrors += 1
    end

    fun numErrors()
        return this._numErrors
    end
end

class CliReporter is ErrorReporter
    fun new()
        super()
        this._errors = []
    end

    fun reportError(message, token)
        super(message, token)

        var lineStart = token.line()
        var colStart = token.coloumn() - 1
        var colEnd = token.coloumnEnd() - 1
        
        var src = token.getSource()
        var line = src.getLine(lineStart)

        var errorBuilder = ["File {0} [line {1}]:\n" % (src.path, lineStart)]
        errorBuilder.add(line)
        errorBuilder.add("\n")
        for var i = 0; i < colStart; i += 1
            errorBuilder.add("\t" if line.charAt(i) == char("\t") else " ")
        end
        errorBuilder.add("^")
        errorBuilder.add("~" * (colEnd - colStart - 1))
        errorBuilder.add("\n")
        errorBuilder.add(message)

        this._errors.add((lineStart, errorBuilder.join()))
    end

    fun printErrors()
        this._errors.sort(|err1, err2| => err1[0] - err2[0])
        for var _, error in this._errors
            io.stderr.writeln(error)
        end
    end

    fun clearErrors()
        this._errors.clear()
    end
end