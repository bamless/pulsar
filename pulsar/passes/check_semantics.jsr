import parse.ast as ast

import pulsar.passes.pass_visitor for PassVisitor
import pulsar.passes.strings for isCtor

static fun isConstUnpack(rvalue)
    return rvalue is ast.TupleLit or rvalue is ast.ListLit
end

static fun isConstLiteral(expr)
    return expr is ast.NumLit or
           expr is ast.BoolLit or
           expr is ast.StringLit or
           expr is ast.NullLit
end

// Check semantic rules of J*
// This are the same check performed by the J* runtime compiler
// In detail it checks for:
//   - break/continue statements outside of a loop
//   - return statements outside of a function or in a constructor
//   - illegal unpacking declarations/assignments (either unbalanced, or using an invalid type)
class SemanticChecker is PassVisitor
    fun new(reporter)
        super(reporter)
        this._scopeDepth = 0
        this._classDepth = 0
        this._funcDepth = 0
        this._loopDepth = 0
    end

    fun visitBlock(block)
        this._enterScope()
        super(block)
        this._exitScope()
    end

    fun visitVar(varDecl)
        this._checkStatic(varDecl)
        if varDecl.unpack and varDecl.init
            this._checkUnpack(varDecl.equal, #varDecl.names, varDecl.init)
        end
        super(varDecl)
    end

    fun visitClass(cls)
        this._checkStatic(cls)
        this._enterClass()
        super(cls)
        this._exitClass()
    end

    fun visitFunc(func)
        this._checkStatic(func)
        this._enterFunction()

        for var def in func.defaults
            def.accept(this)
        end

        var inCtor = this._inClass() and isCtor(func.name)
        if inCtor and func.body.statements.any(|s| => s is ast.ReturnStmt)
            for var returnStmt in func.body.statements.filter(|s| => s is ast.ReturnStmt)
                this._error("Cannot use `return` in constructor", returnStmt.returnTok)
            end
        end

        super(func)

        this._exitFunction()
    end

    fun visitNative(nat)
        this._checkStatic(nat)
        super(nat)
    end

    fun visitFuncLit(func)
        this._enterFunction()
        super(func)
        this._exitFunction()
    end

    fun visitFor(forStmt)
        this._enterLoop()
        super(forStmt)
        this._exitLoop()
    end

    fun visitForEach(forEach)
        this._enterLoop()
        super(forEach)
        this._exitLoop()
    end

    fun visitWhile(whileStmt)
        this._enterLoop()
        super(whileStmt)
        this._exitLoop()
    end

    fun visitBreak(brk)
        if !this._inLoop()
            this._error("Cannot use `break` outside of a loop", brk.token)
        end
    end

    fun visitContinue(cont)
        if !this._inLoop()
            this._error("Cannot use `break` outside of a loop", cont.token)
        end
    end

    fun visitReturn(returnStmt)
        if !this._inFunction()
            this._error("Cannot use `return` outside of a function", returnStmt.returnTok)
        end
    end

    fun visitSuper(sup)
        if !this._inClass()
            this._error("Cannot use `super` outside of a method", sup.superTok)
        end
    end

    fun visitAssignment(assign)
        if assign.l is ast.TupleLit
            this._checkUnpack(assign.equal, #assign.l.expressions, assign.r)
        end
        super(assign)
    end

    fun _checkStatic(decl)
        if decl.isStatic() and !this._inGlobalScope()
            this._error("Static declaration can only appear in global scope", 
                        decl.representativeToken())
        end
    end

    fun _enterScope()
        this._scopeDepth += 1
    end

    fun _exitScope()
        this._scopeDepth -= 1
    end

    fun _enterLoop()
        this._loopDepth += 1
    end

    fun _exitLoop()
        this._loopDepth -= 1
    end

    fun _enterFunction()
        this._funcDepth += 1
    end

    fun _exitFunction()
        this._funcDepth -= 1
    end

    fun _enterClass()
        this._classDepth += 1
    end

    fun _exitClass()
        this._classDepth -= 1
    end

    fun _inGlobalScope()
        return this._scopeDepth == 0
    end

    fun _inLoop()
        return this._loopDepth != 0
    end

    fun _inFunction()
        return this._funcDepth != 0
    end

    fun _inClass()
        return this._classDepth != 0
    end
    
    fun _checkUnpack(errTok, numUnpacks, rvalue)
        if isConstLiteral(rvalue)
            this._error("Right hand side of unpack must be a Tuple or a List", errTok)
        elif isConstUnpack(rvalue) and numUnpacks > #rvalue.expressions
            this._error("Too few values to unpack: expected {0}, got {1}" % 
                        (numUnpacks,  #rvalue.expressions), errTok)
        end
    end
end