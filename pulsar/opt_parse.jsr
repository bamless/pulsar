import io
import math for max
import sys

static var INDENT = " " * 4

// Adds trailing spaces to 'string' in order to left-justify the following text to 'justification'
static fun leftJustify(string, justification)
    return string + " " * (justification - #string)
end

// Builds an help message starting from the options and a custom usage and description message
static fun buildHelpMessage(usage, description, options)
    var helpBuilder = ["Usage: ", usage, "\n", description, "\n\n"]

    // Stringify options along with their description
    var helpLines = [("-h, --help", "Show this help message and exit")]
    
    for var option in options
        var optionString = "-{0}, --{1}" % (option.short, option.long)
        if option.args > 0
            optionString += " " + option.argNames.map(|name| => "'" + name + "'").join(", ")
        end 
        helpLines.add((optionString, option.description))
    end

    var maxColWidth = helpLines.reduce(0, |width, line| => max(width, #line[0]))

    // Add options to the builder, left-jusifying the second coloumn
    var helpOption, helpDescription = helpLines.removeAt(0)
    helpBuilder.add(INDENT)
    helpBuilder.add(leftJustify(helpOption, maxColWidth))
    helpBuilder.add("  ")
    helpBuilder.add(helpDescription)
    helpBuilder.add("\n\n")

    helpBuilder.add("Options")
    for var option, description in helpLines
        helpBuilder.add("\n")
        helpBuilder.add(INDENT)
        helpBuilder.add(leftJustify(option, maxColWidth))
        helpBuilder.add("  ")
        helpBuilder.add(description)
    end

    return helpBuilder.join()
end

// Processes the option array (array of opt_parse.Option) and returns a Table
// mapping from long and short option strings back to the opt_parse.Option
static fun buildMapFromOptions(options)
    var optMap = {}
    for var option in options
        var short = "-" + option.short
        var long = "--" + option.long
        if optMap.contains(short)
            raise InvalidArgException("Duplicate short option '{0}'" % option.short)
        end
        if optMap.contains(long)
            raise InvalidArgException("Duplicate long option '{0}'" % option.long)
        end
        optMap[short] = option
        optMap[long] = option
    end
    return optMap
end

// Pops n elements from 'stack'
static fun popn(stack, num)
    if num == 1
        return stack.pop()
    end
    
    var res = List(num)
    for var i = 0; i < num; i += 1
        res[i] = stack.pop()
    end
    
    return res
end

class OptParser
    fun new(usage, description, options)
        this._options = options
        this._optMap = buildMapFromOptions(options)
        this._helpMsg = buildHelpMessage(usage, description, options)
    end

    fun parse(args)
        var argStack = args.reversed().collect(List)
        var result, nonOpts = {}, []

        while #argStack > 0
            var arg = argStack.pop()

            if !arg.startsWith("-") or #arg <= 1
                nonOpts.add(arg)
                continue
            end

            if arg == "--"
                nonOpts.addAll(argStack.reversed())
                break
            end

            if !arg.startsWith("--") and #arg > 2
                argStack.addAll(arg[2, #arg].reversed().map(|flag| => "-" + flag))
                arg = arg[0, 2]
            end

            if arg == "-h" or arg == "--help"
                this.printHelp()
                sys.exit(0)
            end

            var option = this._optMap[arg]
            if !option
                io.stderr.writeln("error: unknown option `{0}`" % arg)
                this.printHelp()
                sys.exit(-1)
            end

            if option.args > 0
                if #argStack < option.args
                    io.stderr.writeln("error: option `{0}` requires {1} arguments" % 
                                      (arg, option.args))
                    this.printHelp()
                    sys.exit(-1)
                end
                result[option.long] = popn(argStack, option.args)
            else
                result[option.long] = true
            end
        end

        for var option in this._options
            if !result.contains(option.long)
                if option.required
                    io.stderr.writeln("error: option `{0}, {1}` is mandatory" %
                                      (option.short, option.long))
                    this.printHelp()
                    sys.exit(-1)
                elif option.default
                    result[option.long] = option.default
                end
            end
        end

        return result, nonOpts
    end

    fun printHelp()
        io.stdout.writeln(this._helpMsg)
    end
end

class Option
    fun new(long, short, description, args=0, argNames=null, default=null, required=false)
        assert(#long > 1, "Long option must have length greater than one", InvalidArgException)
        assert(#short == 1, "Short option must have length equal to one", InvalidArgException)
        assert(args == 0 or args == #argNames, "Not enough argument names given", InvalidArgException)
        assert(!required or default, "Required argument {0} cannot have default value" % long, InvalidArgException)
        assert(args > 0 or default == null, "Flag option '{0}' cannot have default value" % long, InvalidArgException)

        this.long = long
        this.short = short
        this.args = args
        this.default = default
        this.argNames = argNames
        this.required = required
        this.description = description
    end
end