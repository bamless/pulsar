import parse.ast as ast

import pulsar.builtins as builtins
import pulsar.passes.pass_visitor for PassVisitor
import pulsar.passes.symtable for SymbolTable
import pulsar.passes.token_utils as token_utils

class UnusedChecker is PassVisitor
    fun new(reporter, ignoreUnusedArg=false)
        super(reporter)
        this._variables = SymbolTable()  // Symbol table of Identifier -> Boolean (usage status)
        this._ignoreUnusedArg = ignoreUnusedArg
    end

    fun visitModule(module)
        this._enterScope()
        super(module)
        this._exitScope()
    end

    fun visitBlock(block)
        this._enterScope()
        super(block)
        this._exitScope()
    end

    fun visitFunc(func)
        if !this._inGlobalScope() or func.isStatic()
            this._define(func.name)
        end

        this._enterScope()

        for var arg in func.arguments
            this._define(arg)
            if this._ignoreUnusedArg
                this._setUsed(arg)
            end
        end

        super(func)
        
        this._exitScope()
    end

    fun visitFuncLit(funcLit)
        this._enterScope()

        for var arg in funcLit.arguments
            this._define(arg)
            if this._ignoreUnusedArg
                this._setUsed(arg)
            end
        end

        super(funcLit)
        
        this._exitScope()
    end

    fun visitNative(nat)
        if !this._inGlobalScope() or nat.isStatic()
            this._define(nat.name)
        end
        super(nat)
    end

    fun visitClass(cls)
        if !this._inGlobalScope() or cls.isStatic()
            this._define(cls.name)
        end
        super(cls)
    end

    fun visitVar(varDecl)
        if !this._inGlobalScope() or varDecl.isStatic()
            for var name in varDecl.names
                this._define(name)
            end
        end
        super(varDecl)
    end

    fun visitFor(forStmt)
        this._enterScope()
        super(forStmt)
        this._exitScope()
    end

    fun visitForEach(forEach)
        this._enterScope()
        super(forEach)
        this._exitScope()
    end

    fun visitWith(withStmt)
        withStmt.expression.accept(this)

        this._enterScope()

        this._define(withStmt.name)
        withStmt.body.accept(this)

        this._exitScope()
    end

    fun visitExcept(exceptStmt)
        this._enterScope()

        exceptStmt.expression.accept(this)
        this._define(exceptStmt.name)
        
        for var stmt in exceptStmt.body.statements
            stmt.accept(this)
        end

        this._exitScope()
    end

    fun visitImport(importStmt)
        if this._inGlobalScope() return end

        if importStmt.asName
            this._define(importStmt.asName)
        elif importStmt.names
            for var name in importStmt.names
                this._define(name)
            end
        else
            this._define(importStmt.modules[0])
        end
    end

    fun visitAssignment(assign)
        assign.rval.accept(this)

        // Assignment to a variable literal doesn't count as usage, so skip them
        for var lval in assign.lvals.filter(|e| => !(e is ast.VarLit))
            lval.accept(this)
        end
    end

    fun visitVarLit(varLit)
        var found = this._variables.lookup(varLit.id) != null
   
        if found and token_utils.isIgnored(varLit.id) and !token_utils.isDunder(varLit.id)
            this._warn("Name '{0}' not ignored as it ought to be" % varLit.id.getLexeme(), varLit.id)
        end

        this._setUsed(varLit.id)
    end

    fun _enterScope()
        this._variables.enterScope()
    end

    fun _exitScope()
        var used = this._variables.getScope(-1)
        for var token in used
            if !used[token] and !token_utils.isIgnored(token)
                this._warn("Name '{0}' declared but not used" % token.getLexeme(), token)
            end
        end
        this._variables.exitScope()
    end

    fun _define(token)
        this._variables.insert(token, false)
    end

    fun _setUsed(token)
        this._variables.set(token, true)
    end

    fun _inGlobalScope()
        return #this._variables == 1
    end
end