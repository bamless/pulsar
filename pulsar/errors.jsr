import io

// Error reporter interface.
// The various error checking passes call `reportError` every time they encounter a problem
class ErrorReporter
    // @arg message A description of the error
    // @arg token   Token involved in the error
    fun reportError(message_, token_) raise NotImplementedException() end
end

// Abstract implementation of ErrorReporter that buffers the errors and
// delays the reporting until `reportErrors` is called.
class BufferedReporter is ErrorReporter
    fun new()
        this._errors = []
    end

    // Buffers an error to be reported at a later time
    fun reportError(message, token)
        this._errors.add((message, token))
    end

    // Primitive method called during `reportErrors` to format an error.
    // To be overridden by subclasses for customizing how an error should be formatted
    fun doFormatError(message_, token_) raise NotImplementedException() end

    // Primitive method called during `reportErrors` to output a formatted error.
    // To be overridden by subclasses for customizing where the error should be output
    fun doOutputError(error_) raise NotImplementedException() end

    // Reports all recorded errors till now and clears the error buffer.
    // The errors are sorted by line.
    // This, being a template method, musn't be overridden by subclasses 
    fun reportErrors()
        this._errors.sort(|e1, e2| => e1[1].line() - e2[1].line())
        for var message, token in this._errors
            this.doOutputError(this.doFormatError(message, token))
        end
        this._errors.clear()
    end

    // Returns the number of errors currently buffered
    fun numErrors()
        return #this._errors
    end
end

// Abstract implementation of BufferedReporter that writes the errors to a file.
// The ownership of the file passed upon construction is taken by the class,
// and thus it should be closed only by calling the `close` method provided here
class FileReporter is BufferedReporter
    fun new(file)
        super()
        this._file = file
    end

    fun doOutputError(error)
        this._file.writeln(error)
    end

    fun close()
        // Do not close standard file descriptors
        if this._file != io.stderr and this._file != io.stdout
            this._file.close()
        end
    end
end

// Formats errors in a human readable form and writes them to a file
class PrettyReporter is FileReporter
    fun new(file)
        super(file)
    end

    fun doFormatError(message, token)
        var lineStart = token.line()
        var colStart = token.coloumn() - 1
        var colEnd = token.coloumnEnd() - 1
    
        var src = token.getSource()
        var line = src.getLine(lineStart)

        var errorBuilder = ["File {0} [line {1}]:\n" % (src.path, lineStart)]
        errorBuilder.add(line)
        errorBuilder.add("\n")
        for var i = 0; i < colStart; i += 1
            errorBuilder.add("\t" if line.charAt(i) == char("\t") else " ")
        end
        errorBuilder.add("^")
        errorBuilder.add("~" * (colEnd - colStart - 1))
        errorBuilder.add("\n")
        errorBuilder.add(message)

        return errorBuilder.join()
    end
end

class JsonReporter is FileReporter
    fun doFormatError(message, token)
        return ##{
            '"severity"' : '"error"', // TODO: add more severities
            '"path"'     : '"{0}"' % token.getSource().path,
            '"start"'    : token.start(),
            '"end"'      : token.start() + token.length(),
            '"line"'     : token.line(),
            '"coloumn"'  : token.coloumn(),
            '"message"'  : '"{0}"' % message.escaped()
        }
    end
end
