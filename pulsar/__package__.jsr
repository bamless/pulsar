import io
import sys

import pulsar.errors for Severity
import pulsar.errors.json_reporter for JsonReporter
import pulsar.errors.pretty_reporter for PrettyReporter
import pulsar.opt_parse as opt_parse
import pulsar.pulsar for Pulsar

var VERSION = (0, 0, 5)

fun main(args)
    var parser = opt_parse.OptParser("pulsar [options] [files...]", "A static analyzer for the J* language", [
        opt_parse.Option("out", "o", "Write errors to the specified file", 1, ["file"]),
        opt_parse.Option("version", "v", "Print version information and exit", 0),
        opt_parse.Option("json", "j", "Output errors formatted as JSON", 0),
        opt_parse.Option("no-resolve", "V", "Disable variable resolution pass", 0),
        opt_parse.Option("no-redefined-globals", "g", "Ignore redefined global variables", 0),
        opt_parse.Option("no-unreachable", "U", "Disable unreachable code pass", 0),
        opt_parse.Option("no-unused-args", "a", "Ignore unused function arguments", 0),
        opt_parse.Option("no-unused", "u", "Disable unused variable pass", 0),
        opt_parse.Option("no-check-returns", "r", "Disable return checking pass", 0),
        opt_parse.Option("no-access-check", "A", "Disable access checking pass", 0)
    ])

    var opts, files = parser.parse(args)

    if opts["version"]
        print("{0} v{1}" % (__name__, VERSION.join(".")))
        sys.exit(0)
    end

    var outFile = io.stderr
    
    if opts["out"]
        try
            outFile = io.File(opts["out"], "w")
        except io.IOException e
            io.stderr.writeln("Error opening output file: {0}" % e.err())
            sys.exit(-1)
        end
    end

    var pulsar = Pulsar(opts)
    var reporter = JsonReporter(outFile) if opts["json"] else PrettyReporter(outFile)

    try
        var totalErrs = {
            Severity.ERROR   : 0,
            Severity.WARNING : 0
        }

        for var path in files
            try
                print("Analyzing {0}..." % path)

                pulsar.analyzeFile(path, reporter)
                var numErrors = reporter.reportErrors()

                for var errorType in numErrors
                    totalErrs[errorType] += numErrors[errorType]
                end

                print("File {0}: {1} errors, {2} warnings\n" % (path, numErrors[Severity.ERROR], \
                      numErrors[Severity.WARNING]))
            except io.IOException e
                io.stderr.writeln("Error {0}: {1}\n" % (path, e.err()))
                totalErrs[Severity.ERROR] += 1
            end
        end

        print("Total: {0} errors, {1} warnings in {2} {3}" % (totalErrs[Severity.ERROR], \
              totalErrs[Severity.WARNING], #files, "files" if #files != 1 else "file"))
    ensure
        reporter.close()
    end
end