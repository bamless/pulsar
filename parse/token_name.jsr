import parse.token for Type

var TokenName = {
    Type.LPAREN: "(",
    Type.RPAREN: ")",
    Type.LSQUARE: "[",
    Type.RSQUARE: "]", 
    Type.LCURLY: "{",
    Type.RCURLY: "}",
    Type.BANG: "!",
    Type.BANG_EQ: "!=",
    Type.COMMA: ",",
    Type.DOT: ".",
    Type.VARARG: "...",
    Type.ARROW: "=>",
    Type.EQUAL: "=",
    Type.PLUS_EQ: "+=",
    Type.MINUS_EQ: "-=",
    Type.DIV_EQ: "/=",
    Type.MULT_EQ: "*=",
    Type.MOD_EQ: "%=",
    Type.EQUAL_EQUAL: "==",
    Type.GT: ">",
    Type.GE: ">=",
    Type.LT: "<",
    Type.LE: "<=",
    Type.LSHIFT: "<<",
    Type.RSHIFT: ">>",
    Type.PLUS: "+",
    Type.MINUS: "-",
    Type.DIV: "/",
    Type.MULT: "*",
    Type.MOD: "%",
    Type.POW: "^",
    Type.HASH: "#",
    Type.HASH_HASH: "##",
    Type.AMPER: "&",
    Type.TILDE: "~",
    Type.COLON: ":",
    Type.PIPE: "|",
    Type.SEMICOLON: ";",
    Type.IN: "in",
    Type.BEGIN: "begin",
    Type.END: "end",
    Type.IDENTIFIER: "<identifier>",
    Type.STRING: "<string>",
    Type.NUMBER: "<number>",
    Type.AND: "and",
    Type.CLASS: "class",
    Type.ELSE: "else",
    Type.FALSE: "false",
    Type.NAT: "native",
    Type.FUN: "fun",
    Type.FOR: "for",
    Type.IF: "if",
    Type.ELIF: "elif",
    Type.NULL: "null",
    Type.OR: "or",
    Type.RETURN: "return",
    Type.IMPORT: "import",
    Type.AS: "as",
    Type.IS: "is",
    Type.SUPER: "super",
    Type.TRUE: "true",
    Type.VAR: "var",
    Type.STATIC: "static",
    Type.WHILE: "while",
    Type.CONTINUE: "continue",
    Type.BREAK: "break",
    Type.TRY: "try",
    Type.EXCEPT: "except",
    Type.ENSURE: "ensure",
    Type.RAISE: "raise",
    Type.WITH: "with",
    Type.UNTERMINATED_STR: "<unterminated string>",
    Type.NEWLINE: "<newline>",
    Type.ERR: "<error>",
    Type.EOF: "<end of file>",
}