import pulsar.builtins as builtins
import pulsar.parse.ast as ast
import pulsar.passes.pass_visitor for PassVisitor
import pulsar.passes.symtable for SymbolTable

// Computes the intersection of two Tables, only considering keys
static fun intersect(table1, table2)
    var res = {}
    for var key in table1
        if table2.contains(key)
            res[key] = true
        end
    end
    return res
end

// Computes the union of two Tables, only considering keys
static fun union(table1, table2)
    var res = {}
    for var key in table1
        res[key] = true
    end
    for var key in table2
        res[key] = true
    end
    return res
end

// Stores information about a declared variable
static class Variable
    construct(name, line, scope)
        this.name = name
        this.line = line
        this.scope = scope
    end

    fun __eq__(o)
        return type(o) == type(this) and this.scope == o.scope and this.name == o.name
    end

    fun __hash__()
        return (this.name.__hash__() + this.scope.__hash__()) & 0xffffffff
    end
end

// Variable resolver
// Walks the AST and makes sure that variables respect scoping rules
// It also detects and reports some common errors, such as use before declaration of
// static globals, possibly uninitialized variables and unused variables
class VariableResolver is PassVisitor
    construct(reporter, ignoreGlobalRedef=false)
        super(reporter)
        this._scopes = SymbolTable()       // Symboltable String (variable name) -> Variable
        this._initialized = SymbolTable()  // Symboltalbe Variable -> Boolean (init status)
        this._ignoreGlobalRedef = ignoreGlobalRedef
        this._functionDepth = 0
        this._fwdRefs = []
    end

    fun visitModule(module)
        this._enterScope()
        
        super(builtins.getBuiltinModule("core.jsr"))
        this._visitAndPropagate(module.statements)

        this._resolveFwdRefs()
        this._exitScope()
    end

    // Visits a set of statements and propagates their variable 
    // initialization state into the current scope
    fun _visitAndPropagate(stmts)
        for var stmt in stmts
            var initializedVars = stmt.accept(this)
            if  initializedVars
                for var variable in initializedVars
                    if variable.scope <= this._getCurScope()
                        this._setInitialized(variable)
                    end
                end
            end
        end
    end

    // -----------------------------------------------------------------------------
    // DECLARATIONS
    // -----------------------------------------------------------------------------

    fun visitFunc(func)
        if func.isStatic()
            this._checkStaticDecl(func.name)
        end
        this._define(func.name, true)
        this._visitFunction(func)
    end

    fun visitClass(cls)
        if cls.isStatic()
            this._checkStaticDecl(cls.name)
        end

        this._define(cls.name, true)

        if cls.superClass
            cls.superClass.accept(this)
        end

        // We don't care about natives
        for var meth in cls.methods.filter(|m| => m is ast.FuncDecl)
            this._visitFunction(meth, true)
        end
    end

    fun visitNative(nat)
        if nat.isStatic()
            this._checkStaticDecl(nat.name)
        end
        this._define(nat.name, true)
        super(nat)
    end

    fun visitVar(varDecl)
        var variables = []
        for var name in varDecl.names
            if varDecl.isStatic()
                this._checkStaticDecl(name)
            end
            variables.add(this._define(name, false))
        end

        super(varDecl)

        if varDecl.init != null
            for var variable in variables.filter(|v| => v != null)
                this._setInitialized(variable)
            end
        end
    end

    fun _visitFunction(func, isMethod=false)
        this._enterFunction()

        if isMethod
            this._defineName('this', func.funTok.line(), this._getCurScope(), true)
        end

        if func.vararg
            this._defineName('args', func.funTok.line(), this._getCurScope(), true)
        end

        for var arg in func.arguments
            this._define(arg, true)
        end

        this._visitAndPropagate(func.body.statements)

        this._exitFunction()
    end

    fun _checkStaticDecl(token)
        if !this._inGlobalScope() 
            return
        end

        var name = token.getLexeme()

        for var fwdDecl in this._fwdRefs
            if name == fwdDecl.getLexeme()
                this._error("Static name '{0}' referenced before declaration (line {1})" %
                            (name, token.line()), fwdDecl)
            end
        end
    end

    // -----------------------------------------------------------------------------
    // STATEMENTS
    // -----------------------------------------------------------------------------

    // Visits a block and returns a Table containing the variables initialized in it
    fun visitBlock(block)
        this._enterScope()
        this._visitAndPropagate(block.statements)
        return this._exitScope()
    end

    // Visits an if statement and retuns variables initialized in both branches
    fun visitIf(ifStmt)
        ifStmt.cond.accept(this)

        var thenInit = ifStmt.thenBody.accept(this)

        var elseInit = {}
        if ifStmt.elseBody
            elseInit = ifStmt.elseBody.accept(this)
        end

        return intersect(thenInit, elseInit)
    end

    // Visits a for statement and returns variables initialized in its head
    fun visitFor(forStmt)
        this._enterScope()

        if forStmt.init forStmt.init.accept(this) end
        if forStmt.cond forStmt.cond.accept(this) end
        if forStmt.action forStmt.action.accept(this) end

        forStmt.body.accept(this)
        
        return this._exitScope()
    end

    // Visits a try statement and returns variables initialized in both the try and all excepts
    // clauses plus all variables initialized in the ensure clause
    fun visitTry(tryStmt)
        var tryInit = tryStmt.tryBlock.accept(this)

        if tryStmt.excepts != null
            for var exc in tryStmt.excepts
                var excInit = exc.accept(this)
                tryInit = intersect(tryInit, excInit)
            end
        end

        if tryStmt.ensureBlock
            var ensureInit = tryStmt.ensureBlock.accept(this)
            tryInit = union(tryInit, ensureInit)
        end

        return tryInit
    end

    // Visit an except clause and returns variables initialized in it
    fun visitExcept(exceptStmt)
        this._enterScope()
       
        exceptStmt.expression.accept(this)
        this._define(exceptStmt.name, true)

        for var stmt in exceptStmt.body.statements
            stmt.accept(this)
        end

        return this._exitScope()
    end

    // Visits a foreach statement. Doesn't return anything as its body is not guaranteed to be 
    // executed, so no variables in it are definitely initialized
    fun visitForEach(forEach)
        forEach.iter.accept(this)

        this._enterScope()

        forEach.variable.accept(this)
        for var id in forEach.variable.names
            var variable = this._lookup(id)
            this._setInitialized(variable)
        end

        for var stmt in forEach.body.statements
            stmt.accept(this)
        end

        this._exitScope()
    end

    // Visits a with statement. Doesn't return anything as its body is not guaranteed to be 
    // executed, so no variables in it are definitely initialized
    fun visitWith(withStmt)
        withStmt.expression.accept(this)

        this._enterScope()

        this._define(withStmt.name, true)
        withStmt.body.accept(this)

        this._exitScope()
    end

    // Visits an import statement. Defines the right module variables as initialized depending
    // on the kind of impot it is (import ..., import ... as ... or import ... for ...)
    fun visitImport(importStmt)
        if importStmt.asName
            this._define(importStmt.asName, true)
        elif importStmt.names
            for var name in importStmt.names
                this._define(name, true)
            end
        else
            this._define(importStmt.modules[0], true)
        end
    end

    // -----------------------------------------------------------------------------
    // EXPRESSIONS
    // -----------------------------------------------------------------------------

    fun visitAssignment(assign)
        assign.rval.accept(this)

        // Set all variables in the assignment as initialized
        for var varLit in assign.lvals.filter(|lval| => lval is ast.VarLit)
            var variable = this._lookup(varLit.id)
            if variable
                this._setInitialized(variable)
            end
        end

        for var lval in assign.lvals
            lval.accept(this)
        end
    end

    fun visitVarLit(varLit)
        this._resolve(varLit.id)
    end

    fun visitFuncLit(funcLit)
        this._visitFunction(funcLit)
    end

    // -----------------------------------------------------------------------------
    // SCOPE MANAGEMENT AND VARIABLE RESOLUTION
    // -----------------------------------------------------------------------------

    fun _enterFunction()
        this._enterScope()
        this._functionDepth += 1
    end

    fun _exitFunction()
        this._functionDepth -= 1
        this._exitScope()
    end

    fun _enterScope()
        this._scopes.enterScope()
        this._initialized.enterScope()
    end

    fun _exitScope()
        this._scopes.exitScope()
        return this._initialized.exitScope()
    end

    fun _setInitialized(variable)
        this._initialized.insert(variable, true)
    end

    fun _isInitialized(variable)
        return this._initialized.lookup(variable)
    end

    fun _define(token, initialize)
        var variable = this._scopes.lookupAt(token.getLexeme(), -1)

        if variable and !(this._ignoreGlobalRedef and this._inGlobalScope())
            this._error("Name '{0}' already declared, previous declaration at line {1}" %
                        (variable.name, variable.line), token)
            return null
        end
        
        return this._defineName(token.getLexeme(), token.line(), this._getCurScope(), initialize)
    end

    fun _defineName(name, line, scope, initialize)
        var variable = Variable(name, line, scope)
        this._scopes.insert(name, variable)
        if initialize
            this._setInitialized(variable)
        end
        return variable
    end

    fun _lookup(token)
        return this._scopes.lookup(token.getLexeme())
    end

    fun _resolve(token)
        var variable = this._lookup(token)

        if variable
            if !this._isInitialized(variable)
                this._warn("Variable '{0}' (declared at line {1}) may be uninitialized" %
                            (variable.name, variable.line), token)
            end
        elif !this._inMainFunc()
            this._fwdRefs.add(token)
        else
            this._error("Cannot resolve name '{0}'" % token.getLexeme(), token)
        end
    end

    fun _resolveFwdRefs()
        for var token in this._fwdRefs
            this._resolve(token)
        end
    end

    fun _inMainFunc()
        return this._functionDepth == 0
    end

    fun _inGlobalScope()
        return #this._scopes == 1
    end

    fun _getCurScope()
        return #this._scopes - 1
    end
end