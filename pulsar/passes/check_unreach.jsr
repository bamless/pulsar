import pulsar.passes.pass_visitor for PassVisitor

class UnreachableCodeChecker is PassVisitor
    fun new(reporter)
        super(reporter)
        this._loopDepth = 0
    end

    fun visitBlock(block)
        for var n, stmt in block.statements.enumerate()
            var controlInterrupted = stmt.accept(this)
            if controlInterrupted
                // If control is interrupted by the statement, and we're 
                // not on the last instruction, report unreachable code
                if n != #block.statements - 1
                    this._error("Unreachable statement. Previous statement breaks control unconditionally", 
                                block.statements[n + 1].representativeToken())
                end
                // Propragate interruption of control flow
                return true
            end
        end
        return false
    end

    fun visitIf(ifStmt)
        ifStmt.cond.accept(this)
        var thenInterrupts = ifStmt.thenBody.accept(this)
        var elseInterrupts = ifStmt.elseBody.accept(this) if ifStmt.elseBody else false
        return thenInterrupts and elseInterrupts
    end

    fun visitFor(forStmt)
        this._enterLoop()

        if forStmt.init forStmt.init.accept(this) end
        if forStmt.cond forStmt.cond.accept(this) end
        if forStmt.action forStmt.action.accept(this) end
        var interrupts = forStmt.body.accept(this)

        this._exitLoop()
        return interrupts
    end

    fun visitForEach(forEach)
        this._enterLoop()

        forEach.variable.accept(this)
        forEach.iter.accept(this)
        var interrupts = forEach.body.accept(this)

        this._exitLoop()
        return interrupts
    end

    fun visitWhile(whileStmt)
        this._enterLoop()

        whileStmt.cond.accept(this)
        var interrupts = whileStmt.body.accept(this)

        this._exitLoop()
        return interrupts
    end

    fun visitWith(withStmt)
        withStmt.expression.accept(this)
        return withStmt.body.accept(this)
    end

    fun visitTry(tryStmt)
        var tryInterrupts = tryStmt.tryBlock.accept(this)

        if tryStmt.excepts
            for var exc in tryStmt.excepts
                exc.accept(this)
            end
        end

        var ensureInterrupts = false 
        if tryStmt.ensureBlock
            ensureInterrupts = tryStmt.ensureBlock.accept(this)
        end

        return (tryInterrupts or ensureInterrupts)
    end

    // Statements that cause an interruption of control flow

    fun visitReturn(_)
        return true
    end

    fun visitRaise(_)
        return true
    end

    fun visitBreak(_)
        if !this._inLoop()
            return false
        end
        return true
    end

    fun visitContinue(_)
        if !this._inLoop()
            return false
        end
        return true
    end

    fun _inLoop()
        return this._loopDepth != 0
    end

    fun _enterLoop()
        this._loopDepth += 1
    end

    fun _exitLoop()
        this._loopDepth -= 1
    end
end