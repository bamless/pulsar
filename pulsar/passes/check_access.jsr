import parse.ast as ast

import pulsar.passes.pass_visitor for PassVisitor
import pulsar.passes.symtable for SymbolTable
import pulsar.passes.token_utils as token_utils

static fun isThisLit(expr)
    return expr is ast.VarLit and expr.id.getLexeme() == token_utils.THIS_NAME
end

static fun isInstanceAttribute(expr)
    return expr is ast.AttributeExpr and isThisLit(expr.l)
end

class AccessChecker is PassVisitor
    fun new(reporter)
        super(reporter)
        this._classDepth = 0
        this._functions = []
    end

    fun visitFunc(func)
        this._enterFunction(func)
        super(func)
        this._exitFunction()
    end

    fun visitClass(cls)
        this._enterClass()
        super(cls)
        this._exitClass()
    end

    fun visitAttribute(attribute)
        if token_utils.isPrivate(attribute.name) and !(this._inClass() and isThisLit(attribute.l)) 
            this._error("Accessing supposedly private attribute '{0}'" % attribute.name.getLexeme(),
                        attribute.name)
        end
        super(attribute)
    end

    fun visitAssignment(assign)
        for var lval in assign.lvals
            this._detectConstantAssign(lval)
        end
        super(assign)
    end

    fun _detectConstantAssign(lval)
        // Don't check for constant assignments in constructors when assigning to `this`
        if this._inClass() and token_utils.isCtor(this._currentFunction().name) and 
           isInstanceAttribute(lval)
            return
        end

        var name = null
        if lval is ast.VarLit
            name = lval.id
        elif lval is ast.AttributeExpr
            name = lval.name
        end

        if name and token_utils.isConstant(name)
            this._error("Assigning to supposedly constant name '{0}'" % name.getLexeme(), name)
        end
    end

    fun _enterClass()
        this._classDepth += 1
    end

    fun _exitClass()
        this._classDepth -= 1
    end

    fun _inClass()
        return this._classDepth != 0
    end

    fun _enterFunction(func)
        this._functions.add(func)
    end

    fun _exitFunction()
        this._functions.pop()
    end

    fun _currentFunction()
        return this._functions[#this._functions - 1]
    end
end