import parse.source as source
import parse.parser for Parser

import pulsar.passes.check_return for ReturnChecker
import pulsar.passes.check_semantics for SemanticChecker
import pulsar.passes.check_unused for UnusedChecker
import pulsar.passes.check_unreach for UnreachableCodeChecker
import pulsar.passes.resolve_var for VariableResolver

class Pulsar
    fun new(opts)
        this._opts = opts
    end

    fun analyzeFile(path, reporter)
        var parser = Parser(source.fromFile(path), reporter.reportError)
        var ast = parser.parse()
        if !ast return end

        var opts = this._opts

        // Semantic checker always executed
        var semanticChecker = SemanticChecker(reporter)
        ast.accept(semanticChecker)

        if !opts["no-resolve"]
            var varResolver = VariableResolver(reporter)
            ast.accept(varResolver)
        end
        if !opts["no-unused"]
            var unusedChecker = UnusedChecker(reporter)
            ast.accept(unusedChecker)
        end
        if !opts["no-check-retunrs"]
            var returnChecker = ReturnChecker(reporter)
            ast.accept(returnChecker)
        end
        if !opts["no-unreachable"]
            var unreachChecker = UnreachableCodeChecker(reporter)
            ast.accept(unreachChecker)
        end
    end
end